github.ioの個人ページ

Done

Now
To Do
	* src/gallery_tpl.html:
	出版論文の動画は載せてみたい。
	論文ごとにするか、動画毎にするか。
	動画毎の方が論文に関係ない動画も載せられる。
	論文ごとだと論文の図とかも紹介しやすい。
	detailsやjsで折りたたみにするべきか。
	detailsは押した後に履歴が残る感じなのが気持ち悪い。
	active_pageがまだ"index"のまま。
	ちゃんとやったら"gallery"に変える。
	その際はtemplate.htmlも編集。
	BrandenburgのResearch Highlightとか参考にすべきか。
	https://www.nordita.org/~brandenb/highlights/
	* src:
	index、publicationsなどをcompile.pyで指定。
	それで被コンパイルファイル・メニュー両方をコントロール。
	* css/page_style.min.css:
	scssで一つのファイルを生成するようにする。
	* 業績:
	CSVファイルから業績を出力したい。
	HTMLに整形するpythonスクリプトを作成。
	* CV:
	Contact detailsなど正式っぽいやつを作る。
	* PDF版CV:
	Employment/Curriculum_VitaeのPDF。
	PDFとHTMLを同時に生成できるようにしたい。
	業績欄だけ同時生成でも良い。
	ダウンロードボタンはbootstrapのボタンを使う。
	* 小さい研究会:
	SGEPSSいれたっけ？
	天文台のflux emergence ws
	名大のcycle prediction ws
	IAC/ESTミーティング
	* 講義:
	SS2017
	* outreach:
	最前線ツアー。
	講義とまとめるべき？
	* SNS:
	researchmap、ocridのアカウントを載せる。
	researchgateも？
	* 日本語発表・日本語論文:
	ちゃんと載せたほうが良い。
	最近記録を忘れていて大変。
	* 目次:
	*_tpl.htmlを探して勝手に構造化させる。
	compileも*_tpl.htmlを探して実行。
	しかし、それだとテスト用の*_tpl.htmlを作った時に面倒か。
	むしろ*_tpl.html形式などでサイトの構造を用に記述すべきか。
	* 多言語対応:
	多分、テンプレートエンジンのif文を使うと簡単。
	Python内の変数のlang ja/enで区別。
	一つの子テンプレートから日本語・英語2種類のファイルを出力したい。
	日本語の翻訳が無い場合は英語を表示。
	./ja/index.htmlと./en/index.htmlで分ける。
	GitHub PagesはリダイレクトにJekyllが使えるため、_config.ymlを作る。
	英語のindex.htmlを./において、日本語は./ja/においてもよいのかも。
	* SEO:
	ちゃんとやったほうが良い。
	ISEEのリンクにも登録してもらう。
	日本語サイトもあった方が日本語のGoogle検索にひっかかるらしい。
	* その他:
	twitterとかfacebook、githubのアカウント。
	左側のメニューバーの下の方が寂しい。
	my research。Brandenburgとか楽しい。
	業績の自分の名前を目立たせる。題名を斜め or 赤に。
	CVとHomeを独立。Homeには画像を何か置く。
	アクセス解析。普通にjsのGoogleアナリティクスで良さそう。
	robots.txtでChangelogとかsrcを読まないように。
Future
	* Github.io:
	ドキュメントルートの変更。
	gitでsubtreeを作るのが一つの方法。gh-pages。
	ん、githubのsettingで出来るっぽい。
	./doc/を作れば良さそう。
	あー、でもユーザーページはmasterのルートからじゃないとだめっぽい。
	プロジェクトページならいけるっぽいが。
	どうやらCNAMEを置くと独自ドメインにも出来るっぽい。
	時期を見て独自ドメインを取得してプロジェクトページにしようか。
	* 勉強:
	JekyllやPelikanを使ってみる。
	そのままJekyllでやるのも良いし、
	自分のコードをよくするために使っても良い。

2018.09.23	d012
	* 一旦完成:
	1ページづつのファーストビュー速度を追求。
	GTMetrixで100%達成。
	Page Speed Insightもモバイル100%、パソコン99%を達成。
	パソコンはサーバーのレスポンスだから
	サーバー変えるかCDN使わんと無理。
	Pingdomでも100点。
	W3Cチェックも問題なし。
	* deploy.sh:
	デプロイ用スクリプト。
	テンプレートをコンパイルし、圧縮して、githubに上げる。
	--remove-tag-whitespaceはW3Cチェックで
	スペースが無いって文句言われるからやらない。
	* compress_html.sh:
	nodejsのhtml-minifierを使ってhtmlを圧縮。
	* src/template.html:
	htmlにcssをインライン展開。
	あとで圧縮するためcssをまとめるのはやめた。
	* favicon.svg:
	GTmetrixでリクエストを2回してて、
	何かと思ったらfaviconが無いと言われた。
	data URIとしてtemplate.htmlに埋め込み。
	念の為favicon.icoもルートに置いておく。
2018.09.22	d011
	* css/page_style.min.css:
	bootstrap-reboot.min.cssとpage_style.cssをcatでまとめた。
	* src/template.html:
	新しいtmp以下のテンプレートを利用。
	古いbootstrapのいろいろは削除。
	assets、dist。
	* src/gallery_tpl.html:
	とりあえず作ってみた。
2018.09.22	d010
	* share/20180919asj_tts:
	MP4ファイルの削除。
	https://qiita.com/go_astrayer/items/6e39d3ab16ae8094496c
	index.htmlを画像ファイルのみに修正。
	* tmp:
	index.html, page_style.css。
	bootstrap-reboot.cssのみを使ったテンプレート。
2018.09.22	d009
	* share/20180919asj_tts:
	天文学会用動画サイト。
	次のバージョンではgitの差分情報ごと削除予定。
	* CSSの調整:
	<div class="header">
	{% block header %}
	{% endblock %}
	</div>
	のようにすれば、わざわざ<p class="lead">や
	<ul class="list">等でclassを指定せずに済むようになる。
	* presentation_tpl.html:
	Shift-JISの空白が混ざってたので削除。
2018.06.11	d008
	* Bootstrap4に移行:
	example/coverベース。
	かなり気に入ってる。
	* メニュー:
	上と下にあるし、
	メニューが増えても自動で調整。
	jinja2のfor文を使う。
	active等もfor文中のif文で設定する。
2018.06.11	d007
	* バックアップ
2018.06.04	d006
	* 戻した:
	d003とほぼ同じ。
2018.06.04	d005
	* all:
	pure-layout-marketingベースに変更。
	そこそこ良さそうだが時間切れ。
	tucked-menuの方がシンプル。
	というか、もうtuckedしなくても良い気がしてきた。
	メニューだけlayout-marketingを真似たい。
	とりあえずd003に戻す。
2018.06.04	d004
	* js/tucked-menu.js:
	tucked-menu用のjavascript。
	* css/tucked-menu.css:
	tucked-menu用のCSS。
	* src/template.html:
	tucked-menu用のテンプレート。
	* css/tucked-menu.css:
	調整中。
	メニューが左に寄り過ぎ。
	あんまりよくないかも。
2018.06.04	d003
	* src/template.html:
	Copyrightを更新。
	* src/publications_tpl.html:
	早川くん論文を追加。
	* src/presentations_tpl.html:
	海外発表を追加。
	ASTRONUM
	JpGU
	DKIST CSP WS
	Cycle予測WS
2017.09.07	d002
	* presentations_tpl.html:
	hinode-7の年が書いてないのを追加。
	* publications_tpl.html:
	3次元ジェット論文を追加。
2017.06.22	d001
	* JQuery:
	pythonじゃなくjsでできないかと試したが、
	Chromeで上手く表示出来なかった。
	safariは上手くいった。
	やはり静的に生成するほうが安全そう。
	* Pythonの利用:
	HTMLテンプレートを作って
	メニュー部分とメインコンテンツを分離。
	* ディレクトリ構造:
	css: cssファイル
	js: javascriptファイル
	src: 完成したHTMLファイルを生成するためのソース。
	* コンパイル方法:
	Makefileを書く。
	これで完全なHTMLファイルを静的に生成。
	* 更新方法:
	./update.sh
	Githubへのアップロード。
	* デザインの変更:
	フッターの追加。
	Pureのホームページのソースを見るとlayouts・mainの中にあった。
	そういうものなのか。
2017.06.21	d000
	* バックアップ
2017.06.15
	* 作成:
	bitbucketのページからコピー。
	CVのPDFを追加。
	* side-menu.css:
	list(ul, ol; ul li, ol li)の設定を追加。
	paddingのみ。
	* side-menu.css:
	メニューの色を調節。
	ボーダーの有無を調節。
	参考: https://www.materialui.co/flatuicolors
